name: Build and Deploy
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  lint:
    name: ‚úÖ Lint
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4
      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: üíæ Install Project Dependencies
        run: npm ci
      - name: ‚úÖ Lint Check
        run: npm run lint

  format:
    name: üíÖ Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4
      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: üíæ Install Project Dependencies
        run: npm ci
      - name: üíÖ Prettier Check
        run: npm run format:check

  tsc:
    name: üìò TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4
      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: üíæ Install Project Dependencies
        run: npm ci
      - name: üìò TypeScript Check
        run: npm run types:check

  unit-tests:
    name: üß™ Unit Tests
    needs: [lint, format, tsc]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4
      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: üíæ Install Project Dependencies
        run: npm ci
      - name: üß™ Run Unit Tests
        run: npm test -- --coverage
      - name: üîç SonarQube Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  e2e-tests:
    name: üß™ E2E Tests
    needs: [lint, format, tsc]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4
      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: üíæ Install Project Dependencies
        run: npm ci
      - name: Get installed Playwright version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(jq -r '.dependencies["@playwright/test"].version' package-lock.json)
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION"
        shell: bash
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-cache-${{ env.PLAYWRIGHT_VERSION }}
      - name: Prepare Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      - name: üöÄ Start Dev Server
        run: npm run dev &
        env:
          NYT_API_KEY: ${{ secrets.NYT_API_KEY }}
      - name: ‚è±Ô∏è Wait for Dev Server to be Ready
        run: npx wait-on http://localhost:3000 --timeout 300000 --interval 5000
      - name: üß™ Run E2E Tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_TEST_BASE_URL: 'http://localhost:3000'
          NYT_API_KEY: ${{ secrets.NYT_API_KEY }}

  build-deploy:
    name: üöÄ Build and Deploy to Vercel
    needs: [unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4
      - name: üèó Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: üíæ Install Vercel CLI
        run: npm install --global vercel@latest
      - name: ‚¨áÔ∏è Pull Vercel Environment Information from Production
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: üì¶ Move Environment Variables to .env.production
        run: |
          if [ -f ".vercel/.env.production.local" ]; then
            mv .vercel/.env.production.local .env.production
          else
            echo ".vercel/.env.production.local does not exist"
            exit 1
          fi
      - name: üì¶ Build Project Artifacts for Production
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: üöÄ Deploy Project Artifacts to Production
        id: deploy
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
